# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xm8Q5zpANNfH1VRgMaZkP6dnj-EkUnwc
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# ==============================
# STEP 1: Load Data
# ==============================
# Sample dataset
data = {
    'Experience': [1, 3, 5, 2, 7, 10],
    'Education': ['Bachelors', 'Masters', 'Masters', 'Bachelors', 'PhD', 'PhD'],
    'Job Role': ['Data Analyst', 'Software Engineer', 'Software Engineer', 'HR Executive', 'Manager', 'Director'],
    'Location': ['New York', 'San Francisco', 'San Francisco', 'Chicago', 'Austin', 'Seattle'],
    'Salary': [60000, 95000, 120000, 58000, 150000, 200000]
}

df = pd.DataFrame(data)

# ==============================
# STEP 2: Features & Target
# ==============================
X = df.drop('Salary', axis=1)
y = df['Salary']

# ==============================
# STEP 3: Column Transformation
# ==============================
categorical_cols = ['Education', 'Job Role', 'Location']
numerical_cols = ['Experience']

preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
], remainder='passthrough')

# ==============================
# STEP 4: Create Pipeline
# ==============================
pipeline = Pipeline([
    ('preprocess', preprocessor),
    ('model', LinearRegression())
])

# ==============================
# STEP 5: Train/Test Split
# ==============================
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ==============================
# STEP 6: Train Model
# ==============================
pipeline.fit(X_train, y_train)

# ==============================
# STEP 7: Evaluation
# ==============================
y_pred = pipeline.predict(X_test)
print("RÂ² Score:", r2_score(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

# ==============================
# STEP 8: Predict New Input
# ==============================
new_employee = pd.DataFrame([{
    'Experience': 4,
    'Education': 'Masters',
    'Job Role': 'Software Engineer',
    'Location': 'San Francisco'
}])

predicted_salary = pipeline.predict(new_employee)
print("Predicted Salary for new employee: $", round(predicted_salary[0], 2))



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# STEP 1: Load Dataset
df = pd.read_csv("employee_salary_data.csv")  # Make sure this file is in your working directory

# STEP 2: Separate Features and Target
X = df.drop('Salary', axis=1)
y = df['Salary']

# STEP 3: Define Columns
categorical_cols = ['Education', 'Job Role', 'Location']
numerical_cols = ['Experience']

# STEP 4: Preprocessing Pipeline
preprocessor = ColumnTransformer([
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
], remainder='passthrough')

# STEP 5: Model Pipeline
pipeline = Pipeline([
    ('preprocess', preprocessor),
    ('model', LinearRegression())
])

# STEP 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# STEP 7: Train the Model
pipeline.fit(X_train, y_train)

# STEP 8: Evaluate the Model
y_pred = pipeline.predict(X_test)
print("RÂ² Score:", r2_score(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

# STEP 9: Predict New Data
new_employee = pd.DataFrame([{
    'Experience': 4,
    'Education': 'Masters',
    'Job Role': 'Software Engineer',
    'Location': 'San Francisco'
}])

predicted_salary = pipeline.predict(new_employee)
print("Predicted Salary for new employee: $", round(predicted_salary[0], 2))

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# After: y_pred = pipeline.predict(X_test)

# RÂ² Score
r2 = r2_score(y_test, y_pred)

# Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# Root Mean Squared Error
rmse = np.sqrt(mse)

# Mean Absolute Error
mae = mean_absolute_error(y_test, y_pred)

print(f"ðŸ“Š Model Evaluation Metrics:")
print(f"RÂ² Score           : {r2:.4f}")
print(f"Mean Squared Error : {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"Mean Absolute Error: {mae:.2f}")

import matplotlib.pyplot as plt

# Plot Actual vs Predicted
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, color='blue', edgecolors='k')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', linewidth=2)
plt.xlabel("Actual Salary")
plt.ylabel("Predicted Salary")
plt.title("Actual vs Predicted Salary")
plt.grid(True)
plt.tight_layout()
plt.show()